Install docker-compose on your machine, if not already installed. :-
kush@kush-Lenovo-Z580:~$ sudo docker-compose --version
docker-compose version 1.21.0, build 5920eb0
Create a directory named wordpress on your local. :-
kush@kush-Lenovo-Z580:~$ mkdir wordpress
switch to that directory and create a file named docker-compose.yaml :-
kush@kush-Lenovo-Z580:~$ cd wordpress/
kush@kush-Lenovo-Z580:~$ sudo vim docker-compose.yml
kush@kush-Lenovo-Z580:~$
Use docker-compose version 2 to create docker-compose.yaml file. :-
Create a service named "wordpress" using wordpress:latest image.
Map port of wordpress container port 80 to host system port 8000.
Add a parameter to restart container in case service went down.
Within wordpress environment variable, add wordpress_db_host value along with port.
Also add one more variable named wordpress_db_password.
Add a volume named wordpress_data.
*Add one more service named "db" under same docker-compose file.
Use image named mysql with version 5.7
Use volume wordpress_data and map it to /var/lib/mysql
Enable always restart parameter.
Add environment variables named "MYSQL_ROOT_PASSWORD", "MYSQL_DATABASE", "MYSQL_USER" and "MYSQL_PASSWORD" along with corresponding values for all.
At last add a dependency of db service in wordpress service.
kush@kush-Lenovo-Z580:~$ sudo cat docker-compose.yml
version: '2'
services:
wordpress:
depends\_on:

   - db

image: wordpress:latest

container\_name: test-wordpress

restart: always

ports:

  - &quot;8000:80&quot;

environment:

   WORDPRESS\_DB\_HOST: db:3306

   WORDPRESS\_DB\_USER: wordpress

   WORDPRESS\_DB\_PASSWORD: wordpress
db:
 image: mysql:5.7

 volumes:

   - wordpress\_data:/var/lib/mysql

 restart: always

 environment:

   MYSQL\_ROOT\_PASSWORD: password

   MYSQL\_DATABASE: wordpress

   MYSQL\_USER: wordpress

   MYSQL\_PASSWORD: wordpress
volumes:
wordpress\_data:
kush@kush-Lenovo-Z580:~$
save the file and build docker-compose.yaml and create containers for wordpress and db machine. :-
kush@kush-Lenovo-Z580:~$ sudo docker-compose up -d
WARNING: The Docker Engine you're using is running in swarm mode.
Compose does not use swarm mode to deploy services to multiple nodes in a swarm. All containers will be scheduled on the current node.
To deploy your application across the swarm, useÂ docker stack deploy.
Creating network "wordpress_default" with the default driver
Creating volume "wordpress_wordpress_data" with default driver
Pulling db (mysql:5.7)...
5.7: Pulling from library/mysql
Digest: sha256:691c55aabb3c4e3b89b953dd2f022f7ea845e5443954767d321d5f5fa394e28c
Status: Downloaded newer image for mysql:5.7
Creating wordpress_db_1 ... done
Creating test-wordpress ... done
kush@kush-Lenovo-Z580:~$
Display currently bulit containers created using docker-compose. :-
kush@kush-Lenovo-Z580:~$ sudo docker-compose ps
 Name                   Command               State          Ports

test-wordpress docker-entrypoint.sh apach ... Up 0.0.0.0:8000->80/tcp
wordpress_db_1 docker-entrypoint.sh mysqld Up 3306/tcp
kush@kush-Lenovo-Z580:~$
Stop and remove your docker container using docker-compose. :-
kush@kush-Lenovo-Z580:~$ sudo docker-compose stop db
Stopping wordpress_db_1 ... done
kush@kush-Lenovo-Z580:~$
kush@kush-Lenovo-Z580:~$ sudo docker-compose stop wordpress
Stopping test-wordpress ... done
kush@kush-Lenovo-Z580:~$  sudo docker-compose rm db
Going to remove wordpress_db_1
Are you sure? [yN] y
Removing wordpress_db_1 ... done
kush@kush-Lenovo-Z580:~$ docker-compose rm wordpress
Going to remove test-wordpress
Are you sure? [yN] y
Removing test-wordpress ... done


